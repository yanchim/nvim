{
  "sleep": {
    "prefix": "sleep",
    "body": "await new Promise((r) => setTimeout(r, $0));"
  },
  "event handler": {
    "prefix": "on",
    "body": [
      "${1:emitter}.on('${2:event}', (${3:arguments}) => {",
      "\t${0}",
      "});"
    ]
  },
  "addEventListener": {
    "prefix": "ael",
    "body": [
      "${1:document}.addEventListener('${2:event}', (${3:ev}) => {",
      "\t${0}",
      "});"
    ]
  },
  "removeEventListener": {
    "prefix": "rel",
    "body": "${1:document}.removeEventListener('${2:event}', ${3:listener});"
  },
  "getElementById": {
    "prefix": "gi",
    "body": "const ${1:el} = ${2:document}.getElementById('${3:id}');"
  },
  "getElementsByClassName": {
    "prefix": "gc",
    "body": "const ${1:els} = Array.from(${2:document}.getElementsByClassName('${3:class}'));"
  },
  "getElementsByTagName": {
    "prefix": "gt",
    "body": "const ${1:els} = Array.from(${2:document}.getElementsByTagName('${3:tag}'));"
  },
  "querySelector": {
    "prefix": "qs",
    "body": "const ${1:el} = ${2:document}.querySelector('${3:selector}');"
  },
  "querySelectorAll": {
    "prefix": "qsa",
    "body": "const ${1:els} = Array.from(${2:document}.querySelectorAll('${3:selector}'));"
  },
  "appendChild": {
    "prefix": "eac",
    "body": "${1:el}.appendChild(${2:elem});"
  },
  "removeChild": {
    "prefix": "erc",
    "body": "${1:el}.removeChild(${2:elem});"
  },
  "forEach": {
    "prefix": "foreach",
    "body": [
      "${1:collection}.forEach((${2:elem}) => {",
      "\t$0",
      "});"
    ]
  },
  "map": {
    "prefix": "map",
    "body": [
      "${1:collection}.map((${2:elem}) => {",
      "\t$0",
      "})"
    ]
  },
  "reduce": {
    "prefix": "reduce",
    "body": [
      "${1:collection}.reduce((${2:prev}, ${3:curr}) => {",
      "\t$0",
      "}${4:, initial});"
    ]
  },
  "filter": {
    "prefix": "filter",
    "body": [
      "${1:collection}.filter((${2:elem}) => {",
      "\t$0",
      "})"
    ]
  },
  "find": {
    "prefix": "find",
    "body": [
      "${1:collection}.find((${2:elem}) => {",
      "\t$0",
      "});"
    ]
  },
  "every": {
    "prefix": "every",
    "body": [
      "${1:collection}.every((${2:elem}) => {",
      "\t$0",
      "});"
    ]
  },
  "some": {
    "prefix": "some",
    "body": [
      "${1:collection}.some((${2:elem}) => {",
      "\t$0",
      "});"
    ]
  },
  "let": {
    "prefix": "let",
    "body": "let ${1:name} = ${2:value};"
  },
  "const": {
    "prefix": "const",
    "body": "const ${1:name} = ${2:value};"
  },
  "export module": {
    "prefix": "exp",
    "body": "export ${1:member};"
  },
  "module default export": {
    "prefix": "expd",
    "body": "export default ${1:member};"
  },
  "import module": {
    "prefix": "imp",
    "body": "import ${2:*} from '${1:module}';"
  },
  "immediately-invoked function expression": {
    "prefix": "iife",
    "body": [
      "(function (${1:arguments}) {",
      "\t${0}",
      "})(${2});"
    ]
  },
  "console.log": {
    "prefix": "cl",
    "body": "console.log($1)"
  },
  "console.log a variable": {
    "prefix": "cv",
    "body": "console.log('$1:', $1)"
  },
  "console.log interpolation": {
    "prefix": "ci",
    "body": "console.log(`$1`)"
  },
  "console.error": {
    "prefix": "ce",
    "body": "console.error($1)"
  },
  "console.warn": {
    "prefix": "cw",
    "body": "console.warn($1)"
  },
  "use strict": {
    "prefix": "uss",
    "body": "'use strict';"
  },
  "JSON.stringify()": {
    "prefix": "js",
    "body": "JSON.stringify($1)"
  },
  "JSON.parse()": {
    "prefix": "jp",
    "body": "JSON.parse($1)"
  },
  "prototype method": {
    "prefix": "proto",
    "body": [
      "${1:Class}.prototype.${2:method} = (${3:args}) => {",
      "\t${0}",
      "}"
    ]
  },
  "Object.assign": {
    "prefix": "oa",
    "body": "Object.assign(${1:dest}, ${2:source})"
  },
  "Object.create": {
    "prefix": "oc",
    "body": "Object.create(${1:obj})"
  },
  "Object.entries": {
    "prefix": "oe",
    "body": "Object.entries(${1:obj})"
  },
  "Object.keys": {
    "prefix": "ok",
    "body": "Object.keys(${1:obj})"
  },
  "Object.values": {
    "prefix": "ov",
    "body": "Object.values(${1:obj})"
  },
  "ternary": {
    "prefix": "te",
    "body": "${1:cond} ? ${2:true} : ${3:false};"
  },
  "For": {
    "prefix": "for",
    "body": [
      "for ($1) {",
      "\t$0",
      "}"
    ],
    "description": "For Loop"
  },
  "For-In": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      "\tif (${2:object}.hasOwnProperty(${1:key})) {",
      "\t\tconst ${3:element} = ${2:object}[${1:key}];",
      "\t\t${0}",
      "\t}",
      "}"
    ],
    "description": "For-In Loop"
  },
  "For-Of": {
    "prefix": "forof",
    "body": [
      "for (const ${1:iterator} of ${2:collection}) {",
      "\t${0}",
      "}"
    ],
    "description": "For-Of Loop"
  },
  "Async Function": {
    "prefix": "afn",
    "body": [
      "async function ${1:name}($2) {",
      "\t$0",
      "}"
    ],
    "description": "Async Function Statement"
  },
  "Function": {
    "prefix": "fn",
    "body": [
      "function ${1:name}($2) {",
      "\t$0",
      "}"
    ],
    "description": "Function Statement"
  },
  "If": {
    "prefix": "if",
    "body": [
      "if (${1:cond}) {",
      "\t$0",
      "}"
    ],
    "description": "If Statement"
  },
  "New": {
    "prefix": "new",
    "body": [
      "const ${1:name} = new ${2:type}(${3:arguments});"
    ],
    "description": "New Statement"
  },
  "Switch": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While": {
    "prefix": "while",
    "body": [
      "while (${1:condition}) {",
      "\t$0",
      "}"
    ],
    "description": "While Statement"
  },
  "Do-While": {
    "prefix": "dowhile",
    "body": [
      "do {",
      "\t$0",
      "} while (${1:condition});"
    ],
    "description": "Do-While Statement"
  },
  "setInterval": {
    "prefix": "siv",
    "body": [
      "setInterval(() => {",
      "\t$0",
      "}, ${1:interval});"
    ],
    "description": "Set Interval Function"
  },
  "setTimeout": {
    "prefix": "sto",
    "body": [
      "setTimeout(() => {",
      "\t$0",
      "}, ${1:timeout});"
    ],
    "description": "Set Timeout Function"
  },
  "Try-Catch": {
    "prefix": "trycatch",
    "body": [
      "try {",
      "\t$1",
      "} catch (err) {",
      "\t$2",
      "} finally {",
      "\t$0",
      "}"
    ],
    "description": "Try-Catch Statement"
  }
}
