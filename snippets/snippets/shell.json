{
  "shebang": {
    "prefix": "bang",
    "body": "#!/usr/bin/env ${0:sh}",
    "description": "Shebang for script"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if [[ ${1:condition} ]]; then",
      "\t${0}",
      "fi"
    ],
    "description": "An IF statement."
  },
  "elseif": {
    "prefix": "elif",
    "body": [
      "elif [[ ${1:condition} ]]; then",
      "\t${0}"
    ],
    "description": "Add an elseif to an if statement."
  },
  "else": {
    "prefix": "else",
    "body": [
      "else",
      "\t${0:command}"
    ],
    "description": "else"
  },
  "for_in": {
    "prefix": "forin",
    "body": [
      "for ${1:VAR} in ${0:LIST}",
      "do",
      "\techo \"\\$${1:VAR}\"",
      "done"
    ],
    "description": "for loop in list"
  },
  "for_i": {
    "prefix": "for",
    "body": [
      "for ((${1:i} = 0; ${1:i} < ${0:10}; ${1:i}++)); do",
      "\techo \"\\$${1:i}\"",
      "done"
    ],
    "description": "An index-based iteration for loop."
  },
  "while": {
    "prefix": "while",
    "body": [
      "while [[ ${1:condition} ]]; do",
      "\t${0}",
      "done"
    ],
    "description": "A while loop by condition."
  },
  "until": {
    "prefix": "until",
    "body": [
      "until [[ ${1:condition} ]]; do",
      "\t${0}",
      "done"
    ],
    "description": "until loop by condition"
  },
  "function": {
    "prefix": "function",
    "body": [
      "${1:name} () {",
      "\t${0}",
      "}"
    ],
    "description": [
      "This defines a function named name.\n",
      "The reserved word function is optional.\n",
      "If the function reserved word is supplied, the parentheses are optional.\n",
      "1. Recommended way:\n",
      "name() {}\n",
      "2. C-like-way:\nfunction name [()] {}"
    ]
  },
  "case": {
    "prefix": "case",
    "body": [
      "case \"\\$${1:VAR}\" in",
      "\t${2:1}) echo 1",
      "\t;;",
      "\t${3:2|3}) echo 2 or 3",
      "\t;;",
      "\t*) echo default",
      "\t;;",
      "esac"
    ],
    "description": [
      "case word in [ [(] pattern [ | pattern ] ... ) list ;; ] ... esac\n",
      "A case command first expands word, and tries to match it against each pattern in turn."
    ]
  },
  "break": {
    "prefix": "break",
    "body": "break ${0}",
    "description": [
      "The break command tells Bash to leave the loop straight away.\n",
      "Enter the break or break (n) where n=number of loops."
    ]
  },
  "expr": {
    "prefix": "expr",
    "body": "expr ${0:1 + 1}",
    "description": "Calculate numbers with Bash."
  }
}
