{
  "useCallback": {
    "prefix": "usecallback",
    "body": "const ${1:cachedFn} = useCallback(${2:fn}, [$0])",
    "description": "useCallback to cache a function"
  },
  "useContext": {
    "prefix": "usecontext",
    "body": "const ${1:ctx} = useContext($2)",
    "description": "useContext hook"
  },
  "useEffect": {
    "prefix": "useeffect",
    "body": ["useEffect(() => {", "\t$1", "}, [$2])"],
    "description": "useEffect hook"
  },
  "useMemoized": {
    "prefix": "usememoized",
    "body": "const ${1:memozied} = useMemo(() => ${2:rst}, [$0])",
    "description": "useMemoized to cache a variable"
  },
  "useReducer": {
    "prefix": "usereducer",
    "body": "const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer}, ${4:args})",
    "description": "useReducer hook"
  },
  "useRef": {
    "prefix": "useref",
    "body": "const ${1:ref} = useRef($0)",
    "description": "useRef hook"
  },
  "useState": {
    "prefix": "usestate",
    "body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initValue})",
    "description": "useState to cache a state"
  }
}
